PROGRAM pick_and_place
  VAR
    TP0 : TP;
    CTU0 : CTU;
  END_VAR
  VAR_EXTERNAL
    ITEM_AT_ENTRY : BOOL;
    ITEM_AT_EXIT : BOOL;
    MOVING_X : BOOL;
    MOVING_Z : BOOL;
    ITEM_DETECTED : BOOL;
    START : BOOL;
    RESET : BOOL;
    STOP : BOOL;
    EMERGENCY_STOP : BOOL;
    AUTO : BOOL;
    FACTORY_IO_RUN : BOOL;
    ENTRY_CONVEYOR : BOOL;
    EXIT_CONVEYOR : BOOL;
    MOVE_X : BOOL;
    MOVE_Z : BOOL;
    GRAB : BOOL;
    START_LIGHT : BOOL;
    RESET_LIGHT : BOOL;
    STOP_LIGHT : BOOL;
    start_scada : BOOL;
    reset_scada : BOOL;
    stop_scada : BOOL;
    COUNTER : INT;
  END_VAR
  VAR
    T1_DONE : BOOL;
    TIME_DELAY : TIME := t#3s;
  END_VAR
  VAR_EXTERNAL
    STEP_0 : BOOL;
    STEP_1 : BOOL;
    STEP_2 : BOOL;
    STEP_3 : BOOL;
    STEP_4 : BOOL;
    STEP_5 : BOOL;
    STEP_6 : BOOL;
    STEP_7 : BOOL;
    STEP_LOCATION : INT;
  END_VAR
  VAR
    R_TRIG1 : R_TRIG;
    _TMP_MOVE117_ENO : BOOL;
    _TMP_MOVE117_OUT : INT;
    _TMP_MOVE13_ENO : BOOL;
    _TMP_MOVE13_OUT : INT;
    _TMP_MOVE16_ENO : BOOL;
    _TMP_MOVE16_OUT : INT;
    _TMP_MOVE19_ENO : BOOL;
    _TMP_MOVE19_OUT : INT;
    _TMP_MOVE22_ENO : BOOL;
    _TMP_MOVE22_OUT : INT;
    _TMP_MOVE25_ENO : BOOL;
    _TMP_MOVE25_OUT : INT;
    _TMP_MOVE28_ENO : BOOL;
    _TMP_MOVE28_OUT : INT;
    _TMP_MOVE31_ENO : BOOL;
    _TMP_MOVE31_OUT : INT;
  END_VAR

  START_LIGHT := AUTO AND NOT(stop_scada) AND EMERGENCY_STOP AND STOP AND (START OR START_LIGHT OR start_scada);
  STOP_LIGHT := NOT(START_LIGHT);
  RESET_LIGHT := RESET OR reset_scada;
  TP0(IN := RESET OR reset_scada, PT := TIME_DELAY);
  T1_DONE := TP0.Q;
  R_TRIG1(CLK := ITEM_AT_EXIT);
  CTU0(CU := R_TRIG1.Q, R := T1_DONE, PV := 32767);
  COUNTER := CTU0.CV;
  _TMP_MOVE117_OUT := MOVE(EN := STEP_0, IN := 0, ENO => _TMP_MOVE117_ENO);
  IF _TMP_MOVE117_ENO THEN
      STEP_LOCATION := _TMP_MOVE117_OUT;
  END_IF;
  _TMP_MOVE13_OUT := MOVE(EN := STEP_1, IN := 1, ENO => _TMP_MOVE13_ENO);
  IF _TMP_MOVE13_ENO THEN
      STEP_LOCATION := _TMP_MOVE13_OUT;
  END_IF;
  _TMP_MOVE16_OUT := MOVE(EN := STEP_2, IN := 2, ENO => _TMP_MOVE16_ENO);
  IF _TMP_MOVE16_ENO THEN
      STEP_LOCATION := _TMP_MOVE16_OUT;
  END_IF;
  _TMP_MOVE19_OUT := MOVE(EN := STEP_3, IN := 3, ENO => _TMP_MOVE19_ENO);
  IF _TMP_MOVE19_ENO THEN
      STEP_LOCATION := _TMP_MOVE19_OUT;
  END_IF;
  _TMP_MOVE22_OUT := MOVE(EN := STEP_4, IN := 4, ENO => _TMP_MOVE22_ENO);
  IF _TMP_MOVE22_ENO THEN
      STEP_LOCATION := _TMP_MOVE22_OUT;
  END_IF;
  _TMP_MOVE25_OUT := MOVE(EN := STEP_5, IN := 5, ENO => _TMP_MOVE25_ENO);
  IF _TMP_MOVE25_ENO THEN
      STEP_LOCATION := _TMP_MOVE25_OUT;
  END_IF;
  _TMP_MOVE28_OUT := MOVE(EN := STEP_6, IN := 6, ENO => _TMP_MOVE28_ENO);
  IF _TMP_MOVE28_ENO THEN
      STEP_LOCATION := _TMP_MOVE28_OUT;
  END_IF;
  _TMP_MOVE31_OUT := MOVE(EN := STEP_7, IN := 7, ENO => _TMP_MOVE31_ENO);
  IF _TMP_MOVE31_ENO THEN
      STEP_LOCATION := _TMP_MOVE31_OUT;
  END_IF;
END_PROGRAM

PROGRAM pick_and_place_sfc
  VAR_EXTERNAL
    ITEM_AT_ENTRY : BOOL;
    ITEM_AT_EXIT : BOOL;
    MOVING_X : BOOL;
    MOVING_Z : BOOL;
    ITEM_DETECTED : BOOL;
    START : BOOL;
    RESET : BOOL;
    STOP : BOOL;
    EMERGENCY_STOP : BOOL;
    AUTO : BOOL;
    FACTORY_IO_RUN : BOOL;
    ENTRY_CONVEYOR : BOOL;
    EXIT_CONVEYOR : BOOL;
    MOVE_X : BOOL;
    MOVE_Z : BOOL;
    GRAB : BOOL;
    START_LIGHT : BOOL;
    RESET_LIGHT : BOOL;
    STOP_LIGHT : BOOL;
    STEP_0 : BOOL;
    STEP_1 : BOOL;
    STEP_2 : BOOL;
    STEP_3 : BOOL;
    STEP_4 : BOOL;
    STEP_5 : BOOL;
    STEP_6 : BOOL;
    STEP_7 : BOOL;
    COUNTER : INT;
  END_VAR
  VAR
    R_TRIG0 : R_TRIG;
    F_TRIG0 : F_TRIG;
    F_TRIG1 : F_TRIG;
    F_TRIG2 : F_TRIG;
    F_TRIG3 : F_TRIG;
    F_TRIG4 : F_TRIG;
    F_TRIG5 : F_TRIG;
    _TMP_SEL57_OUT : BOOL;
    _TMP_SEL61_OUT : BOOL;
    _TMP_AND23_OUT : BOOL;
    _TMP_SEL64_OUT : BOOL;
    _TMP_AND49_OUT : BOOL;
    _TMP_SEL67_OUT : BOOL;
    _TMP_NOT51_OUT : BOOL;
    _TMP_AND32_OUT : BOOL;
    _TMP_SEL70_OUT : BOOL;
    _TMP_AND35_OUT : BOOL;
    _TMP_SEL73_OUT : BOOL;
    _TMP_AND40_OUT : BOOL;
    _TMP_SEL76_OUT : BOOL;
    _TMP_NOT44_OUT : BOOL;
    _TMP_AND56_OUT : BOOL;
    _TMP_SEL79_OUT : BOOL;
  END_VAR

  INITIAL_STEP Step0:
    STEP_0(N);
    COMPUTE_FUNCTION_BLOCKS(S);
  END_STEP

  ACTION COMPUTE_FUNCTION_BLOCKS:
    R_TRIG0(CLK := START);
    _TMP_SEL57_OUT := SEL(AUTO, R_TRIG0.Q, START_LIGHT);
    _TMP_SEL61_OUT := SEL(AUTO, R_TRIG0.Q, ITEM_AT_ENTRY);
    F_TRIG0(CLK := MOVING_Z);
    _TMP_AND23_OUT := AND(ITEM_AT_ENTRY, ITEM_DETECTED, MOVE_Z, F_TRIG0.Q);
    _TMP_SEL64_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND23_OUT);
    F_TRIG1(CLK := MOVING_Z);
    _TMP_AND49_OUT := AND(ITEM_DETECTED, GRAB, F_TRIG1.Q);
    _TMP_SEL67_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND49_OUT);
    _TMP_NOT51_OUT := NOT(ITEM_AT_EXIT);
    F_TRIG3(CLK := MOVING_X);
    _TMP_AND32_OUT := AND(ITEM_DETECTED, MOVE_X, _TMP_NOT51_OUT, F_TRIG3.Q);
    _TMP_SEL70_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND32_OUT);
    F_TRIG2(CLK := MOVING_Z);
    _TMP_AND35_OUT := AND(ITEM_DETECTED, MOVE_Z, MOVE_X, ITEM_AT_EXIT, F_TRIG2.Q);
    _TMP_SEL73_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND35_OUT);
    F_TRIG4(CLK := MOVING_Z);
    _TMP_AND40_OUT := AND(MOVE_X, ITEM_AT_EXIT, F_TRIG4.Q);
    _TMP_SEL76_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND40_OUT);
    _TMP_NOT44_OUT := NOT(ITEM_AT_EXIT);
    F_TRIG5(CLK := MOVING_X);
    _TMP_AND56_OUT := AND(_TMP_NOT44_OUT, F_TRIG5.Q);
    _TMP_SEL79_OUT := SEL(AUTO, R_TRIG0.Q, _TMP_AND56_OUT);
  END_ACTION

  TRANSITION FROM Step0 TO Step1
    := _TMP_SEL57_OUT;
  END_TRANSITION

  STEP Step1:
    ENTRY_CONVEYOR(N);
    EXIT_CONVEYOR(N);
    STEP_1(N);
  END_STEP

  TRANSITION FROM Step1 TO Step2
    := _TMP_SEL61_OUT;
  END_TRANSITION

  STEP Step2:
    MOVE_Z(N);
    GRAB(N);
    EXIT_CONVEYOR(N);
    STEP_2(N);
  END_STEP

  TRANSITION FROM Step2 TO Step3
    := _TMP_SEL64_OUT;
  END_TRANSITION

  STEP Step3:
    GRAB(N);
    EXIT_CONVEYOR(N);
    STEP_3(N);
  END_STEP

  TRANSITION FROM Step3 TO Step4
    := _TMP_SEL67_OUT;
  END_TRANSITION

  STEP Step4:
    GRAB(N);
    MOVE_X(N);
    STEP_4(N);
  END_STEP

  TRANSITION FROM Step4 TO Step5
    := _TMP_SEL70_OUT;
  END_TRANSITION

  STEP Step5:
    GRAB(N);
    MOVE_X(N);
    MOVE_Z(N);
    STEP_5(N);
  END_STEP

  TRANSITION FROM Step5 TO Step6
    := _TMP_SEL73_OUT;
  END_TRANSITION

  STEP Step6:
    MOVE_X(N);
    STEP_6(N);
  END_STEP

  TRANSITION FROM Step6 TO Step7
    := _TMP_SEL76_OUT;
  END_TRANSITION

  STEP Step7:
    EXIT_CONVEYOR(N);
    STEP_7(N);
  END_STEP

  TRANSITION FROM Step7 TO Step0
    := _TMP_SEL79_OUT;
  END_TRANSITION

END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    VAR_GLOBAL
      ITEM_AT_ENTRY AT %QX0.0 : BOOL;
      ITEM_AT_EXIT AT %QX0.1 : BOOL;
      MOVING_X AT %QX0.2 : BOOL;
      MOVING_Z AT %QX0.3 : BOOL;
      ITEM_DETECTED AT %QX0.4 : BOOL;
      START AT %QX0.5 : BOOL;
      RESET AT %QX0.6 : BOOL;
      STOP AT %QX0.7 : BOOL;
      EMERGENCY_STOP AT %QX1.0 : BOOL;
      AUTO AT %QX1.1 : BOOL;
      FACTORY_IO_RUN AT %QX1.2 : BOOL;
      ENTRY_CONVEYOR AT %QX1.3 : BOOL;
      EXIT_CONVEYOR AT %QX1.4 : BOOL;
      MOVE_X AT %QX1.5 : BOOL;
      MOVE_Z AT %QX1.6 : BOOL;
      GRAB AT %QX1.7 : BOOL;
      START_LIGHT AT %QX2.0 : BOOL;
      RESET_LIGHT AT %QX2.1 : BOOL;
      STOP_LIGHT AT %QX2.2 : BOOL;
      start_scada AT %QX2.3 : BOOL;
      reset_scada AT %QX2.4 : BOOL;
      stop_scada AT %QX2.5 : BOOL;
      COUNTER AT %QW0 : INT;
      STEP_LOCATION AT %QW1 : INT;
      STEP_0 : BOOL;
      STEP_1 : BOOL;
      STEP_2 : BOOL;
      STEP_3 : BOOL;
      STEP_4 : BOOL;
      STEP_5 : BOOL;
      STEP_6 : BOOL;
      STEP_7 : BOOL;
    END_VAR
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    TASK task1(INTERVAL := T#0.1ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : pick_and_place;
    PROGRAM instance1 WITH task1 : pick_and_place_sfc;
  END_RESOURCE
END_CONFIGURATION
